{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-animation-text-marque-animationtwo",
  "type": "registry:component",
  "dependencies": [
    "@motionone/utils",
    "clsx",
    "framer-motion",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/text-animation/text-marque/animationtwo.tsx",
      "content": "import React from 'react';\nimport ScrollBaseAnimation from '@/components/core/scroll-text-marque';\n\nfunction index() {\n  return (\n    <>\n      <div className='h-[500px] grid place-content-center'>\n        <ScrollBaseAnimation\n          // delay={500}\n          baseVelocity={3}\n          scrollDependent={true}\n          clasname='font-bold tracking-[-0.07em] leading-[90%]'\n        >\n          Best Component library For Developer\n        </ScrollBaseAnimation>\n      </div>\n    </>\n  );\n}\n\nexport default index;\n",
      "path": "registry/components/text-animation/text-marque/animationtwo.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/core/scroll-text-marque.tsx",
      "content": "'use client';\nimport { useRef, useEffect } from 'react';\nimport {\n  motion,\n  useScroll,\n  useSpring,\n  useTransform,\n  useVelocity,\n  useAnimationFrame,\n  useMotionValue,\n} from 'framer-motion';\nimport { wrap } from '@motionone/utils';\nimport { cn } from '@/lib/utils';\n\ninterface ParallaxProps {\n  children: string;\n  baseVelocity: number;\n  clasname?: string;\n  scrollDependent?: boolean; // Toggle scroll-dependent behavior\n  delay?: number; // Delay before animation starts\n}\n\nexport default function ScrollBaseAnimation({\n  children,\n  baseVelocity = -5,\n  clasname,\n  scrollDependent = false, // Default to false\n  delay = 0, // Default delay is 0 (no delay)\n}: ParallaxProps) {\n  const baseX = useMotionValue(0);\n  const { scrollY } = useScroll();\n  const scrollVelocity = useVelocity(scrollY);\n  const smoothVelocity = useSpring(scrollVelocity, {\n    damping: 50,\n    stiffness: 400,\n  });\n  const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 2], {\n    clamp: false,\n  });\n\n  const x = useTransform(baseX, (v) => `${wrap(-20, -45, v)}%`);\n\n  const directionFactor = useRef<number>(1);\n  const hasStarted = useRef(false); // Track animation start status\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      hasStarted.current = true; // Start animation after the delay\n    }, delay);\n\n    return () => clearTimeout(timer); // Cleanup on unmount\n  }, [delay]);\n\n  useAnimationFrame((t, delta) => {\n    if (!hasStarted.current) return; // Skip if delay hasn't passed\n\n    let moveBy = directionFactor.current * baseVelocity * (delta / 1000);\n\n    // Reverse direction if scrollDependent is true\n    if (scrollDependent) {\n      if (velocityFactor.get() < 0) {\n        directionFactor.current = -1;\n      } else if (velocityFactor.get() > 0) {\n        directionFactor.current = 1;\n      }\n    }\n\n    moveBy += directionFactor.current * moveBy * velocityFactor.get();\n\n    baseX.set(baseX.get() + moveBy);\n  });\n\n  return (\n    <div className='overflow-hidden whitespace-nowrap flex flex-nowrap'>\n      <motion.div\n        className='flex whitespace-nowrap gap-10 flex-nowrap'\n        style={{ x }}\n      >\n        <span className={cn(`block sm:text-[8vw] text-[11vw]`, clasname)}>\n          {children}\n        </span>\n        <span className={cn(`block sm:text-[8vw] text-[11vw]`, clasname)}>\n          {children}\n        </span>\n        <span className={cn(`block sm:text-[8vw] text-[11vw]`, clasname)}>\n          {children}\n        </span>\n        <span className={cn(`block sm:text-[8vw] text-[11vw]`, clasname)}>\n          {children}\n        </span>\n      </motion.div>\n    </div>\n  );\n}\n",
      "path": "components/core/scroll-text-marque.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
