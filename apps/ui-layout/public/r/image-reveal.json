{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-reveal",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "react"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/image-reveal/index.tsx",
      "content": "'use client';\n\nimport { useMediaQuery } from '@/hooks/use-media-query';\nimport { MoveUpRight } from 'lucide-react';\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\n\ninterface ImageData {\n  id: number;\n  src: string;\n  alt: string;\n}\n\nconst images: ImageData[] = [\n  {\n    id: 1,\n    src: 'https://images.unsplash.com/photo-1682806816936-c3ac11f65112?q=80&w=1274&auto=format&fit=crop',\n    alt: 'Image Mousetrail',\n  },\n  {\n    id: 2,\n    src: 'https://images.unsplash.com/photo-1681063762354-d542c03bbfc5?q=80&w=1274&auto=format&fit=crop',\n    alt: 'Spotlight Cards',\n  },\n  {\n    id: 3,\n    src: 'https://images.unsplash.com/photo-1679640034489-a6db1f096b70?q=80&w=1274&auto=format&fit=crop',\n    alt: 'Sparkles Effects',\n  },\n  {\n    id: 4,\n    src: 'https://images.unsplash.com/photo-1679482451632-b2e126da7142?q=80&w=1274&auto=format&fit=crop',\n    alt: 'Horizontal Scroll',\n  },\n];\n\nconst ImageReveal2: React.FC = () => {\n  const isDesktop = useMediaQuery('(min-width: 768px)');\n  const [activeImage, setActiveImage] = useState<ImageData | null>(null);\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n  const [opacity, setOpacity] = useState(0);\n  const [scale, setScale] = useState(0.5);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const requestRef = useRef<number | null>(null);\n  const prevCursorPosition = useRef({ x: 0, y: 0 });\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    const { clientX, clientY } = e;\n    const dx = clientX - prevCursorPosition.current.x;\n    const dy = clientY - prevCursorPosition.current.y;\n\n    // Apply easing to the cursor movement\n    const easeAmount = 0.2;\n    const newX = prevCursorPosition.current.x + dx * easeAmount;\n    const newY = prevCursorPosition.current.y + dy * easeAmount;\n\n    setCursorPosition({ x: newX, y: newY });\n    prevCursorPosition.current = { x: newX, y: newY };\n  }, []);\n\n  useEffect(() => {\n    const updateCursorPosition = (e: MouseEvent) => {\n      if (requestRef.current) return;\n      requestRef.current = requestAnimationFrame(() => {\n        handleMouseMove(e);\n        requestRef.current = null;\n      });\n    };\n\n    window.addEventListener('mousemove', updateCursorPosition);\n    return () => {\n      window.removeEventListener('mousemove', updateCursorPosition);\n      if (requestRef.current) cancelAnimationFrame(requestRef.current);\n    };\n  }, [handleMouseMove]);\n\n  const handleImageHover = useCallback(\n    (image: ImageData) => {\n      if (activeImage !== image) {\n        setActiveImage(image);\n        if (timeoutRef.current) clearTimeout(timeoutRef.current);\n        timeoutRef.current = setTimeout(() => {\n          setOpacity(1);\n          setScale(1);\n        }, 50);\n      } else {\n        setOpacity(1);\n        setScale(1);\n      }\n    },\n    [activeImage]\n  );\n\n  const handleMouseLeave = useCallback(() => {\n    setOpacity(0);\n    setScale(0.5);\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    timeoutRef.current = setTimeout(() => {\n      setActiveImage(null);\n    }, 300);\n  }, []);\n\n  return (\n    <div\n      className='relative w-full min-h-fit dark:bg-gradient-to-b from-black from-10% to-gray-950 to-100% bg-gray-100 rounded-md border'\n      onMouseLeave={handleMouseLeave}\n    >\n      {images.map((image) => (\n        <div\n          key={image.id}\n          className={`p-4 cursor-pointer relative sm:flex items-center justify-between`}\n          onMouseEnter={() => handleImageHover(image)}\n        >\n          {!isDesktop && (\n            <img\n              src={image?.src}\n              className='sm:w-32 sm:h-20 w-full h-52 object-cover rounded-md'\n              alt='mobileImg'\n            />\n          )}\n          <h2\n            className={`newFont dark:text-gray-300 uppercase md:text-5xl sm:text-2xl text-xl font-semibold sm:py-6 py-2 leading-[100%] relative ${\n              activeImage?.id === image?.id\n                ? 'mix-blend-difference z-20 text-gray-300'\n                : 'text-gray-700'\n            }`}\n          >\n            {image.alt}\n          </h2>\n          <button\n            className={`sm:block hidden p-4 rounded-full transition-all duration-300 ease-out ${\n              activeImage?.id === image?.id\n                ? 'mix-blend-difference z-20 bg-white text-black'\n                : ''\n            }`}\n          >\n            <MoveUpRight className='w-8 h-8' />\n          </button>\n          <div\n            className={`h-[2px] dark:bg-white bg-black absolute bottom-0 left-0 transition-all duration-300 ease-linear ${\n              activeImage?.id === image?.id ? 'w-full' : 'w-0'\n            }`}\n          />\n        </div>\n      ))}\n      {isDesktop && activeImage && (\n        <img\n          src={activeImage.src}\n          alt={activeImage.alt}\n          className={`fixed dark:bg-gray-950 bg-white object-cover pointer-events-none z-10 w-[300px] h-[400px] rounded-lg`}\n          style={{\n            left: `${cursorPosition.x}px`,\n            top: `${cursorPosition.y}px`,\n            transform: `translate(-50%, -50%) scale(${scale})`,\n            opacity: opacity,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ImageReveal2;\n",
      "path": "registry/components/image-reveal/index.tsx"
    },
    {
      "type": "registry:hook",
      "target": "hooks/use-media-query.tsx",
      "content": "import { useEffect, useState } from 'react'\n\nexport function useMediaQuery(query: string) {\n  const [value, setValue] = useState(false)\n\n  useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener('change', onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener('change', onChange)\n  }, [query])\n\n  return value\n}\n",
      "path": "hooks/use-media-query.tsx"
    }
  ]
}
