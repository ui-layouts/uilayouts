{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-password-pass-strength-indicator4",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-hover-card",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/form/password/pass-strength-indicator4.tsx",
      "content": "'use client';\nimport React, { useState, useMemo } from 'react';\nimport { Check, Eye, EyeOff, Info, X } from 'lucide-react';\n// shaadcn hover card\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from '@/components/website/ui/hover-card';\n\n// Constants\nconst PASSWORD_REQUIREMENTS = [\n  { regex: /.{8,}/, text: 'At least 8 characters' },\n  { regex: /[0-9]/, text: 'At least 1 number' },\n  { regex: /[a-z]/, text: 'At least 1 lowercase letter' },\n  { regex: /[A-Z]/, text: 'At least 1 uppercase letter' },\n  { regex: /[!-\\/:-@[-`{-~]/, text: 'At least 1 special characters' },\n] as const;\n\ntype StrengthScore = 0 | 1 | 2 | 3 | 4 | 5;\n\nconst STRENGTH_CONFIG = {\n  colors: {\n    0: 'border-border',\n    1: 'border-red-500',\n    2: 'border-orange-500',\n    3: 'border-amber-500',\n    4: 'border-green-400',\n    5: 'border-emerald-500',\n  } satisfies Record<StrengthScore, string>,\n  texts: {\n    0: 'Enter a password',\n    1: 'Weak password',\n    2: 'Medium password!',\n    3: 'Strong password!!',\n    4: 'Very Strong password!!!',\n  } satisfies Record<Exclude<StrengthScore, 5>, string>,\n} as const;\n\n// Types\ntype Requirement = {\n  met: boolean;\n  text: string;\n};\n\ntype PasswordStrength = {\n  score: StrengthScore;\n  requirements: Requirement[];\n};\n\nconst PasswordInput = () => {\n  const [password, setPassword] = useState('');\n  const [isVisible, setIsVisible] = useState(false);\n\n  const calculateStrength = useMemo((): PasswordStrength => {\n    const requirements = PASSWORD_REQUIREMENTS.map((req) => ({\n      met: req.regex.test(password),\n      text: req.text,\n    }));\n\n    return {\n      score: requirements.filter((req) => req.met).length as StrengthScore,\n      requirements,\n    };\n  }, [password]);\n\n  return (\n    <div className='w-96 mx-auto py-12'>\n      <form className='space-y-2'>\n        <div className='flex justify-between'>\n          <label htmlFor='password' className='block text-sm font-medium'>\n            Password\n          </label>\n          <HoverCard openDelay={200}>\n            <HoverCardTrigger>\n              <Info\n                size={20}\n                className={`cursor-pointer  ${\n                  STRENGTH_CONFIG.colors[calculateStrength.score]\n                } transition-all `}\n              />\n            </HoverCardTrigger>\n            <HoverCardContent className='bg-background'>\n              <ul className='space-y-1.5' aria-label='Password requirements'>\n                {calculateStrength.requirements.map((req, index) => (\n                  <li key={index} className='flex items-center space-x-2'>\n                    {req.met ? (\n                      <Check size={16} className='text-emerald-500' />\n                    ) : (\n                      <X size={16} className='text-muted-foreground/80' />\n                    )}\n                    <span\n                      className={`text-xs ${\n                        req.met ? 'text-emerald-600' : 'text-muted-foreground'\n                      }`}\n                    >\n                      {req.text}\n                      <span className='sr-only'>\n                        {req.met\n                          ? ' - Requirement met'\n                          : ' - Requirement not met'}\n                      </span>\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            </HoverCardContent>\n          </HoverCard>\n        </div>\n        <div className='relative'>\n          <input\n            id='password'\n            type={isVisible ? 'text' : 'password'}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder='Password'\n            aria-invalid={calculateStrength.score < 4}\n            aria-describedby='password-strength'\n            className={`cursor-pointer  ${\n              STRENGTH_CONFIG.colors[calculateStrength.score]\n            } transition-all w-full p-2 border-2 rounded-md bg-background outline-none  transition `}\n          />\n          <button\n            type='button'\n            onClick={() => setIsVisible((prev) => !prev)}\n            aria-label={isVisible ? 'Hide password' : 'Show password'}\n            className='absolute inset-y-0 right-0 outline-none flex items-center justify-center w-9 text-muted-foreground/80 hover:text-foreground  '\n          >\n            {isVisible ? <EyeOff size={16} /> : <Eye size={16} />}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PasswordInput;\n",
      "path": "registry/components/form/password/pass-strength-indicator4.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/website/ui/hover-card.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "path": "components/website/ui/hover-card.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
