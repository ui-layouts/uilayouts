{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "spotlight-cards-spotlight-card4",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "next",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/spotlight-cards/spotlight-card4.tsx",
      "content": "// @ts-nocheck\n'use client';\n\nimport { SpotLightItem, Spotlight } from '@/components/core/main-spotlight';\n\n// https://buildui.com/recipes/spotlight\n\nimport { cn } from '@/lib/utils';\nimport Image from 'next/image';\nimport React, { MouseEvent, useRef, useState } from 'react';\n\nexport default function index() {\n  return (\n    <div className='relative bg-black sm:p-8 px-4 rounded-md'>\n      <Spotlight\n        className='sm:w-[30rem]  w-full mx-auto'\n        ProximitySpotlight={true}\n      >\n        <SpotLightItem>\n          <div className=\"relative text-center z-10 sm:px-8 px-4 py-6 rounded-lg w-fit  bg-[url('https://res.cloudinary.com/dzl9yxixg/image/upload/sub-grid_hnhyvi.png')] bg-cover   bg-black h-full mx-auto\">\n            <>\n              <Image\n                src={'/star_tb9ivg.webp'}\n                alt='grid'\n                width={600}\n                className='w-fit mx-auto '\n                height={600}\n              />\n              <h1 className='text-2xl pt-5 font-semibold tracking-tight text-white'>\n                Seamless Animation For All\n              </h1>\n              <p className='pt-2 lg:text-base text-sm  text-gray-300 capitalize'>\n                Effortlessly connect with today's leading technologies including\n                React, TypeScript, Next.js, Tailwind CSS, Motion, and Cypress.\n              </p>\n            </>\n          </div>\n        </SpotLightItem>\n      </Spotlight>\n    </div>\n  );\n}\n",
      "path": "registry/components/spotlight-cards/spotlight-card4.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/core/main-spotlight.tsx",
      "content": "// @ts-nocheck\n'use client'\nimport { cn } from '@/lib/utils'\nimport React, {\n  useRef,\n  useState,\n  MouseEvent,\n  useContext,\n  createContext,\n} from 'react'\ninterface MousePosition {\n  x: number\n  y: number\n}\n\ninterface SpotlightProps {\n  children: React.ReactNode\n  className?: string\n  ProximitySpotlight?: boolean\n  HoverFocusSpotlight?: boolean\n  CursorFlowGradient?: boolean\n}\ninterface SpotlightItemProps {\n  children: React.ReactNode\n  className?: string\n}\n\ninterface SpotLightContextType {\n  ProximitySpotlight: boolean\n  HoverFocusSpotlight: boolean\n  CursorFlowGradient: boolean\n}\n\nconst SpotLightContext = createContext<SpotLightContextType | undefined>(\n  undefined\n)\nexport const useSpotlight = () => {\n  const context = useContext(SpotLightContext)\n  if (!context) {\n    throw new Error('useSpotlight must be used within a SpotlightProvider')\n  }\n  return context\n}\nexport const Spotlight = ({\n  children,\n  className,\n  ProximitySpotlight = true,\n  HoverFocusSpotlight = false,\n  CursorFlowGradient = true,\n}: SpotlightProps) => {\n  return (\n    <SpotLightContext.Provider\n      value={{\n        ProximitySpotlight,\n        HoverFocusSpotlight,\n        CursorFlowGradient,\n      }}\n    >\n      <div className={cn('group relative z-10 rounded-md    ', className)}>\n        {children}\n      </div>\n    </SpotLightContext.Provider>\n  )\n}\nexport function SpotLightItem({ children, className }: SpotlightItemProps) {\n  const { HoverFocusSpotlight, ProximitySpotlight, CursorFlowGradient } =\n    useSpotlight()\n  const boxWrapper = useRef(null)\n  const [isHovered, setIsHovered] = useState(false)\n  const [mousePosition, setMousePosition] = React.useState({\n    x: null,\n    y: null,\n  })\n  React.useEffect(() => {\n    const updateMousePosition = (ev: { clientX: any; clientY: any }) => {\n      setMousePosition({ x: ev.clientX, y: ev.clientY })\n    }\n    window.addEventListener('mousemove', updateMousePosition)\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition)\n    }\n  }, [])\n\n  const [overlayColor, setOverlayColor] = useState({ x: 0, y: 0 })\n  const handleMouemove = ({ currentTarget, clientX, clientY }): MouseEvent => {\n    let { left, top } = currentTarget.getBoundingClientRect()\n\n    const x = clientX - left\n    const y = clientY - top\n\n    setOverlayColor({ x, y })\n  }\n  // console.log(overlayColor)\n\n  return (\n    <div\n      onMouseMove={handleMouemove}\n      onMouseEnter={() => CursorFlowGradient && setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      ref={boxWrapper}\n      className={cn(\n        className,\n        ' relative  rounded-lg p-[2px] bg-[#ffffff15] overflow-hidden'\n      )}\n    >\n      {isHovered && (\n        <div\n          className=\"pointer-events-none absolute opacity-0 z-50 rounded-xl w-full h-full group-hover:opacity-100  transition duration-300 \"\n          style={{\n            background: `\n            radial-gradient(\n              250px circle at ${overlayColor.x}px ${overlayColor.y}px,\n              rgba(255, 255, 255, 0.137),\n              transparent 80%\n            )\n          `,\n          }}\n        />\n      )}\n      {HoverFocusSpotlight && (\n        <div\n          className=\"absolute opacity-0 group-hover:opacity-100 z-10 inset-0 bg-fixed rounded-lg\"\n          style={{\n            background: `radial-gradient(circle at ${mousePosition.x}px ${mousePosition.y}px, #ffffff76 0%,transparent 20%,transparent) fixed `,\n          }}\n        ></div>\n      )}\n      {ProximitySpotlight && (\n        <div\n          className=\"absolute inset-0 z-0  bg-fixed rounded-lg\"\n          style={{\n            background: `radial-gradient(circle at ${mousePosition.x}px ${mousePosition.y}px, #ffffff6e 0%,transparent 20%,transparent) fixed`,\n          }}\n        ></div>\n      )}\n      {children}\n    </div>\n  )\n}\n\ntype SpotlightCardProps = {\n  children: React.ReactNode\n  className?: string\n}\n\nexport function SpotlightCard({\n  children,\n  className = '',\n}: SpotlightCardProps) {\n  return (\n    <div\n      className={`relative h-full bg-slate-800 rounded-3xl p-px before:absolute before:w-80 before:h-80 before:-left-40 before:-top-40 before:bg-slate-400 before:rounded-full before:opacity-0 before:pointer-events-none before:transition-opacity before:duration-500 before:translate-x-[var(--mouse-x)] before:translate-y-[var(--mouse-y)] before:group-hover:opacity-100 before:z-10 before:blur-[100px] after:absolute after:w-96 after:h-96 after:-left-48 after:-top-48 after:bg-indigo-500 after:rounded-full after:opacity-0 after:pointer-events-none after:transition-opacity after:duration-500 after:translate-x-[var(--mouse-x)] after:translate-y-[var(--mouse-y)] after:hover:opacity-10 after:z-30 after:blur-[100px] overflow-hidden ${className}`}\n    >\n      {children}\n    </div>\n  )\n}\n",
      "path": "components/core/main-spotlight.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
