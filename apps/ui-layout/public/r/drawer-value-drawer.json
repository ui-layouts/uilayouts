{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer-value-drawer",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "framer-motion",
    "lucide-react",
    "next",
    "react",
    "tailwind-merge",
    "vaul"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/drawer/value-drawer.tsx",
      "content": "'use client';\nimport { Drawer } from 'vaul';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { useState } from 'react';\nimport { X } from 'lucide-react';\nimport Image from 'next/image';\nimport { useMediaQuery } from '@/hooks/use-media-query';\nimport {\n  DrawerContent,\n  ResponsiveDrawer,\n} from '@/components/core/drawer/vaul-main';\n\nexport default function MyDrawer() {\n  // const [open, setOpen] = useState(false)\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const isDesktop = useMediaQuery('(min-width: 768px)');\n  return (\n    <>\n      <div className='flex justify-between'>\n        <motion.button\n          onClick={() => setDrawerOpen(true)}\n          whileTap={{ scale: 0.9 }}\n          className='inline-flex h-12 w-fit mx-auto animate-background-shine items-center justify-center rounded-md  border-2 dark:border-[#656fe2] border-[#c0c6fc] dark:bg-[linear-gradient(110deg,#1e2a78,45%,#3749be,55%,#1e2a78)] bg-[linear-gradient(110deg,#3d5af1,45%,#5471ff,55%,#3d5af1)] bg-[length:200%_100%] dark:hover:border-white px-6 font-medium text-white dark:text-white transition-colors focus:outline-none focus:ring-2 dark:focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-gray-50'\n        >\n          Open Dialog\n        </motion.button>\n      </div>\n      <ResponsiveDrawer open={drawerOpen} setOpen={setDrawerOpen}>\n        <DrawerContent>\n          <figure className='flex flex-col space-y-1.5 text-center  h-fit dark:bg-gray-900 md:p-0 p-6'>\n            <h1 className='font-medium  text-2xl'>Update Profile Image</h1>\n            <p className='text-sm text-muted-foreground'>\n              Upload a new profile image or remove the current one.\n            </p>\n            <div data-vaul-no-drag className='py-4 space-y-4'>\n              <span className='relative flex justify-center overflow-hidden rounded-xl w-full '>\n                <span className='grid place-content-center h-40  w-40 rounded-xl bg-muted'>\n                  JP\n                </span>\n              </span>\n              <div className='mb-3'>\n                <input\n                  className='w-full border file:p-2 file:bg-black  file:border-none  file:text-white rounded-sm overflow-hidden'\n                  type='file'\n                  id='formFile'\n                />\n              </div>\n              <button\n                type='submit'\n                onClick={() => {\n                  setDrawerOpen(false);\n                }}\n                className='w-full rounded-sm dark:bg-white bg-black  p-2 dark:text-black text-white'\n              >\n                Submit\n              </button>\n            </div>\n          </figure>\n        </DrawerContent>\n      </ResponsiveDrawer>\n    </>\n  );\n}\n",
      "path": "registry/components/drawer/value-drawer.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/core/drawer/vaul-main.tsx",
      "content": "'use client';\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { X } from 'lucide-react';\nimport { Drawer as VaulDrawer } from 'vaul';\nimport { cn } from '@/lib/utils';\n\ninterface DrawerContextProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}\n\nconst DrawerContext = createContext<DrawerContextProps | undefined>(undefined);\n\nexport const useDrawer = () => {\n  const context = useContext(DrawerContext);\n  if (!context) {\n    throw new Error('useDrawer must be used within a DrawerProvider');\n  }\n  return context;\n};\n\ninterface ResponsiveDrawerProps {\n  children: ReactNode;\n  triggerContent?: ReactNode;\n  open?: boolean;\n  setOpen?: (open: boolean) => void;\n  classname?: string;\n  closeBtnClass?: string;\n}\n\nexport function ResponsiveDrawer({\n  children,\n  triggerContent,\n  open: controlledOpen,\n  setOpen: controlledSetOpen,\n  classname,\n  closeBtnClass,\n}: ResponsiveDrawerProps) {\n  const [internalOpen, setInternalOpen] = useState(false);\n  const [isDesktop, setIsDesktop] = useState(false);\n\n  const open = controlledOpen !== undefined ? controlledOpen : internalOpen;\n  const setOpen = controlledSetOpen || setInternalOpen;\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(min-width: 768px)');\n    const handleMediaChange = (event: MediaQueryListEvent) => {\n      setIsDesktop(event.matches);\n    };\n\n    setIsDesktop(mediaQuery.matches);\n    mediaQuery.addEventListener('change', handleMediaChange);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleMediaChange);\n    };\n  }, []);\n\n  return (\n    <DrawerContext.Provider value={{ open, setOpen }}>\n      {triggerContent && <DrawerTrigger>{triggerContent}</DrawerTrigger>}\n      {isDesktop ? (\n        <AnimatePresence>\n          {open && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className='fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm cursor-zoom-out'\n              onClick={() => setOpen(false)}\n            >\n              <motion.div\n                initial={{ scale: 0.9, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                exit={{ scale: 0.9, opacity: 0 }}\n                transition={{ type: 'spring', duration: 0.5 }}\n                onClick={(e) => e.stopPropagation()}\n                className={cn(\n                  'relative w-full max-w-md p-6 border bg-background rounded-lg cursor-default',\n                  classname\n                )}\n              >\n                <button\n                  className={cn(\n                    'absolute top-2 right-2 bg-primary text-background p-2 border z-[1] rounded-md',\n                    closeBtnClass\n                  )}\n                  onClick={() => setOpen(false)}\n                >\n                  <X />\n                </button>\n                {children}\n              </motion.div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      ) : (\n        <VaulDrawer.Root\n          shouldScaleBackground\n          open={open}\n          onOpenChange={setOpen}\n        >\n          <VaulDrawer.Portal>\n            <VaulDrawer.Overlay className='fixed inset-0 z-50 bg-black/50 backdrop-blur-sm' />\n            <VaulDrawer.Content className='fixed bottom-0 left-0 z-50 w-full max-h-[96%] bg-white dark:bg-gray-900'>\n              <div className='mx-auto w-16 h-[0.30rem] flex-shrink-0 rounded-full bg-gray-600 my-4' />\n              <div className='w-full mx-auto max-h-[96vh] overflow-auto'>\n                {children}\n              </div>\n            </VaulDrawer.Content>\n          </VaulDrawer.Portal>\n        </VaulDrawer.Root>\n      )}\n    </DrawerContext.Provider>\n  );\n}\n\nexport function DrawerContent({\n  children,\n  classname,\n}: {\n  children: ReactNode;\n  classname?: string;\n}) {\n  return <div className={cn('', classname)}>{children}</div>;\n}\n\nexport function DrawerTrigger({ children }: { children: ReactNode }) {\n  const { setOpen } = useDrawer();\n  return <div onClick={() => setOpen(true)}>{children}</div>;\n}\n",
      "path": "components/core/drawer/vaul-main.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:hook",
      "target": "hooks/use-media-query.tsx",
      "content": "import { useEffect, useState } from 'react'\n\nexport function useMediaQuery(query: string) {\n  const [value, setValue] = useState(false)\n\n  useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener('change', onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener('change', onChange)\n  }, [query])\n\n  return value\n}\n",
      "path": "hooks/use-media-query.tsx"
    }
  ]
}
