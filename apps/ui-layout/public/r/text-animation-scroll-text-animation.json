{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-animation-scroll-text-animation",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "framer-motion",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/text-animation/scroll-text-animation.tsx",
      "content": "import TextAnimation from '@/components/core/scroll-text';\nimport React, { useRef } from 'react';\n\nfunction index() {\n  return (\n    <div>\n      <div className='h-[550px] grid place-content-center'>\n        <h1 className='text-5xl font-semibold'>Scroll DownðŸ‘‡</h1>\n      </div>\n\n      <div className='py-20 text-center  '>\n        <TextAnimation\n          text='hello world, hope all doing great '\n          variants={{\n            hidden: { filter: 'blur(10px)', opacity: 0, y: 20 },\n            visible: {\n              filter: 'blur(0px)',\n              opacity: 1,\n              y: 0,\n              transition: { ease: 'linear' },\n            },\n          }}\n          classname='text-4xl font-semibold capitalize '\n        />\n        <TextAnimation\n          as='p'\n          letterAnime={true}\n          text=\"do you know we're really open for work but now a days people really don't like what is it\"\n          classname='text-xl w-3/5 mx-auto lowercase leading-5'\n          variants={{\n            hidden: { filter: 'blur(4px)', opacity: 0, y: 20 },\n            visible: {\n              filter: 'blur(0px)',\n              opacity: 1,\n              y: 0,\n              transition: {\n                duration: 0.2,\n              },\n            },\n          }}\n        />\n      </div>\n\n      <div className='py-20  '>\n        <TextAnimation\n          text='Heading Animation'\n          direction='left'\n          lineAnime={true}\n          classname='text-4xl font-semibold capitalize '\n        />\n      </div>\n      <div className='py-32  text-right'>\n        <TextAnimation\n          text='Heading Animation'\n          direction='right'\n          lineAnime={true}\n          classname='text-4xl font-semibold capitalize '\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default index;\n",
      "path": "registry/components/text-animation/scroll-text-animation.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/core/scroll-text.tsx",
      "content": "// @ts-nocheck\n\n'use client';\n\nimport React, { useRef } from 'react';\nimport {\n  ForwardRefComponent,\n  motion,\n  HTMLMotionProps,\n  useInView,\n  Variant,\n} from 'framer-motion';\nimport { cn } from '@/lib/utils';\ntype Direction = 'up' | 'down' | 'left' | 'right';\n\nconst containerVariants = {\n  hidden: {},\n  visible: {\n    transition: {\n      staggerChildren: 0.1,\n    },\n  },\n};\nconst generateVariants = (\n  direction: Direction\n): { hidden: any; visible: any } => {\n  const axis = direction === 'left' || direction === 'right' ? 'x' : 'y';\n  const value = direction === 'right' || direction === 'down' ? 100 : -100;\n\n  return {\n    hidden: { filter: 'blur(10px)', opacity: 0, [axis]: value },\n    visible: {\n      filter: 'blur(0px)',\n      opacity: 1,\n      [axis]: 0,\n      transition: {\n        duration: 0.4,\n        ease: 'easeOut',\n      },\n    },\n  };\n};\n\nconst defaultViewport = { amount: 0.3, margin: '0px 0px 0px 0px' };\n\nconst TextAnimation = ({\n  as = 'h1',\n  text,\n  classname = '',\n  viewport = defaultViewport,\n  variants,\n  direction = 'down',\n  letterAnime = false,\n  lineAnime = false,\n}: {\n  text: string;\n  classname?: string;\n  as?: keyof JSX.IntrinsicElements;\n  viewport?: {\n    amount?: number;\n    margin?: string;\n    once?: boolean;\n  };\n  variants?: {\n    hidden?: any;\n    visible?: any;\n  };\n  direction?: Direction;\n  letterAnime?: boolean;\n  lineAnime?: boolean;\n}) => {\n  const baseVariants = variants || generateVariants(direction);\n  const modifiedVariants = {\n    hidden: baseVariants.hidden,\n    visible: {\n      ...baseVariants.visible,\n    },\n  };\n  const MotionComponent = motion[\n    as as keyof typeof motion\n  ] as React.ComponentType<HTMLMotionProps<any>>;\n  return (\n    <>\n      <>\n        <MotionComponent\n          whileInView='visible'\n          initial='hidden'\n          variants={containerVariants}\n          viewport={viewport}\n          className={cn(\n            `inline-block dark:text-white text-black uppercase  `,\n            classname\n          )}\n        >\n          {lineAnime ? (\n            <>\n              {' '}\n              <motion.span\n                className={`inline-block `}\n                variants={modifiedVariants}\n              >\n                {text}\n              </motion.span>\n            </>\n          ) : (\n            <>\n              {text.split(' ').map((word: string, index: number) => (\n                <motion.span\n                  key={index}\n                  className={`inline-block `}\n                  variants={letterAnime === false ? modifiedVariants : {}}\n                >\n                  {letterAnime ? (\n                    <>\n                      {word.split('').map((letter: string, index: number) => (\n                        <>\n                          <motion.span\n                            className={`inline-block `}\n                            variants={modifiedVariants}\n                          >\n                            {letter}\n                          </motion.span>\n                        </>\n                      ))}\n                      &nbsp;\n                    </>\n                  ) : (\n                    <>{word}&nbsp;</>\n                  )}\n                </motion.span>\n              ))}\n            </>\n          )}\n        </MotionComponent>\n      </>\n    </>\n  );\n};\n\nexport default TextAnimation;\n",
      "path": "components/core/scroll-text.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
