{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal-dialog-card-linear-dialog",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "framer-motion",
    "lucide-react",
    "react",
    "react-dom",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/modal/dialog-card/linear-dialog.tsx",
      "content": "'use client';\n\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useId,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  motion,\n  AnimatePresence,\n  MotionConfig,\n  Transition,\n  Variant,\n} from 'framer-motion';\nimport { createPortal } from 'react-dom';\nimport { cn } from '@/lib/utils';\n// import useClickOutside from '@/hooks/useClickOutside';\nimport { XIcon } from 'lucide-react';\n\ninterface DialogContextType {\n  isOpen: boolean;\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  uniqueId: string;\n  triggerRef: React.RefObject<HTMLDivElement>;\n}\n\nconst DialogContext = React.createContext<DialogContextType | null>(null);\n\nfunction useDialog() {\n  const context = useContext(DialogContext);\n  if (!context) {\n    throw new Error('useDialog must be used within a DialogProvider');\n  }\n  return context;\n}\n\ntype DialogProviderProps = {\n  children: React.ReactNode;\n  transition?: Transition;\n};\n\nfunction DialogProvider({ children, transition }: DialogProviderProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const uniqueId = useId();\n  const triggerRef = useRef<HTMLDivElement>(null);\n\n  const contextValue = useMemo(\n    () => ({ isOpen, setIsOpen, uniqueId, triggerRef }),\n    [isOpen, uniqueId]\n  );\n\n  return (\n    <DialogContext.Provider value={contextValue}>\n      <MotionConfig transition={transition}>{children}</MotionConfig>\n    </DialogContext.Provider>\n  );\n}\n\ntype DialogProps = {\n  children: React.ReactNode;\n  transition?: Transition;\n};\n\nfunction Dialog({ children, transition }: DialogProps) {\n  return (\n    <DialogProvider>\n      <MotionConfig transition={transition}>{children}</MotionConfig>\n    </DialogProvider>\n  );\n}\n\ntype DialogTriggerProps = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n  triggerRef?: React.RefObject<HTMLDivElement>;\n};\n\nfunction DialogTrigger({\n  children,\n  className,\n  style,\n  triggerRef,\n}: DialogTriggerProps) {\n  const { setIsOpen, isOpen, uniqueId } = useDialog();\n\n  const handleClick = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen, setIsOpen]);\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault();\n        setIsOpen(!isOpen);\n      }\n    },\n    [isOpen, setIsOpen]\n  );\n\n  return (\n    <motion.div\n      ref={triggerRef}\n      layoutId={`dialog-${uniqueId}`}\n      className={cn('relative cursor-pointer', className)}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      style={style}\n      role='button'\n      aria-haspopup='dialog'\n      aria-expanded={isOpen}\n      aria-controls={`dialog-content-${uniqueId}`}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype DialogContent = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogContent({ children, className, style }: DialogContent) {\n  const { setIsOpen, isOpen, uniqueId, triggerRef } = useDialog();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [firstFocusableElement, setFirstFocusableElement] =\n    useState<HTMLElement | null>(null);\n  const [lastFocusableElement, setLastFocusableElement] =\n    useState<HTMLElement | null>(null);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setIsOpen(false);\n      }\n      if (event.key === 'Tab') {\n        if (!firstFocusableElement || !lastFocusableElement) return;\n\n        if (event.shiftKey) {\n          if (document.activeElement === firstFocusableElement) {\n            event.preventDefault();\n            lastFocusableElement.focus();\n          }\n        } else {\n          if (document.activeElement === lastFocusableElement) {\n            event.preventDefault();\n            firstFocusableElement.focus();\n          }\n        }\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [setIsOpen, firstFocusableElement, lastFocusableElement]);\n\n  useEffect(() => {\n    if (isOpen) {\n      document.body.classList.add('overflow-hidden');\n      const focusableElements = containerRef.current?.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n      if (focusableElements && focusableElements.length > 0) {\n        setFirstFocusableElement(focusableElements[0] as HTMLElement);\n        setLastFocusableElement(\n          focusableElements[focusableElements.length - 1] as HTMLElement\n        );\n        (focusableElements[0] as HTMLElement).focus();\n      }\n      // Scroll to the top when dialog opens\n      if (containerRef.current) {\n        containerRef.current.scrollTop = 0;\n      }\n    } else {\n      document.body.classList.remove('overflow-hidden');\n      triggerRef.current?.focus();\n    }\n  }, [isOpen, triggerRef]);\n\n  return (\n    <>\n      <motion.div\n        ref={containerRef}\n        layoutId={`dialog-${uniqueId}`}\n        className={cn('overflow-hidden', className)}\n        style={style}\n        role='dialog'\n        aria-modal='true'\n        aria-labelledby={`dialog-title-${uniqueId}`}\n        aria-describedby={`dialog-description-${uniqueId}`}\n      >\n        {children}\n      </motion.div>\n    </>\n  );\n}\n\ntype DialogContainerProps = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogContainer({ children, className }: DialogContainerProps) {\n  const { isOpen, setIsOpen, uniqueId } = useDialog();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      window.scrollTo(0, 0);\n    }\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n  // createPortal(\n  return (\n    <AnimatePresence initial={false} mode='sync'>\n      {isOpen && (\n        <>\n          <motion.div\n            key={`backdrop-${uniqueId}`}\n            className='fixed inset-0 h-full z-50  w-full bg-white/40 backdrop-blur-sm dark:bg-black/40 '\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={() => setIsOpen(false)}\n          />\n          <div className={cn(`fixed  inset-0 z-50 w-fit mx-auto`, className)}>\n            {children}\n          </div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n  //   document.body\n  // )\n}\n\ntype DialogTitleProps = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogTitle({ children, className, style }: DialogTitleProps) {\n  const { uniqueId } = useDialog();\n\n  return (\n    <motion.div\n      layoutId={`dialog-title-container-${uniqueId}`}\n      className={className}\n      style={style}\n      layout\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype DialogSubtitleProps = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogSubtitle({ children, className, style }: DialogSubtitleProps) {\n  const { uniqueId } = useDialog();\n\n  return (\n    <motion.div\n      layoutId={`dialog-subtitle-container-${uniqueId}`}\n      className={className}\n      style={style}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype DialogDescriptionProps = {\n  children: React.ReactNode;\n  className?: string;\n  disableLayoutAnimation?: boolean;\n  variants?: {\n    initial: Variant;\n    animate: Variant;\n    exit: Variant;\n  };\n};\n\nfunction DialogDescription({\n  children,\n  className,\n  variants,\n  disableLayoutAnimation,\n}: DialogDescriptionProps) {\n  const { uniqueId } = useDialog();\n\n  return (\n    <motion.div\n      key={`dialog-description-${uniqueId}`}\n      layoutId={\n        disableLayoutAnimation\n          ? undefined\n          : `dialog-description-content-${uniqueId}`\n      }\n      variants={variants}\n      className={className}\n      initial='initial'\n      animate='animate'\n      exit='exit'\n      id={`dialog-description-${uniqueId}`}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype DialogImageProps = {\n  src: string;\n  alt: string;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogImage({ src, alt, className, style }: DialogImageProps) {\n  const { uniqueId } = useDialog();\n\n  return (\n    <motion.img\n      src={src}\n      alt={alt}\n      className={cn(className)}\n      layoutId={`dialog-img-${uniqueId}`}\n      style={style}\n    />\n  );\n}\n\ntype DialogCloseProps = {\n  children?: React.ReactNode;\n  className?: string;\n  variants?: {\n    initial: Variant;\n    animate: Variant;\n    exit: Variant;\n  };\n};\n\nfunction DialogClose({ children, className, variants }: DialogCloseProps) {\n  const { setIsOpen, uniqueId } = useDialog();\n\n  const handleClose = useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  return (\n    <motion.button\n      onClick={handleClose}\n      type='button'\n      aria-label='Close dialog'\n      key={`dialog-close-${uniqueId}`}\n      className={cn('absolute right-6 top-6', className)}\n      initial='initial'\n      animate='animate'\n      exit='exit'\n      variants={variants}\n    >\n      {children || <XIcon size={24} />}\n    </motion.button>\n  );\n}\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContainer,\n  DialogContent,\n  DialogClose,\n  DialogTitle,\n  DialogSubtitle,\n  DialogDescription,\n  DialogImage,\n};\n",
      "path": "registry/components/modal/dialog-card/linear-dialog.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    },
    {
      "type": "registry:hook",
      "target": "hooks/useClickOutside.tsx",
      "content": "import { RefObject, useEffect } from 'react';\n\nfunction useClickOutside<T extends HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent) => void\n): void {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (!ref || !ref.current || ref.current.contains(event.target as Node)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('touchstart', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('touchstart', handleClickOutside);\n    };\n  }, [ref, handler]);\n}\n\nexport default useClickOutside;\n",
      "path": "hooks/useClickOutside.tsx"
    }
  ]
}
