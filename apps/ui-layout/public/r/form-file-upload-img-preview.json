{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-file-upload-img-preview",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "lucide-react",
    "next",
    "react",
    "react-dropzone",
    "sonner",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/form/file-upload/img-preview.tsx",
      "content": "'use client';\n\nimport {\n  FileUploader,\n  FileInput,\n  FileUploaderContent,\n  FileUploaderItem,\n} from '@/components/core/file-upload';\nimport Image from 'next/image';\nimport { useState } from 'react';\nimport { DropzoneOptions } from 'react-dropzone';\n\nconst FileSvgDraw = () => {\n  return (\n    <>\n      <svg\n        className='w-8 h-8 mb-3 text-primary'\n        aria-hidden='true'\n        xmlns='http://www.w3.org/2000/svg'\n        fill='none'\n        viewBox='0 0 20 16'\n      >\n        <path\n          stroke='currentColor'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n          strokeWidth='2'\n          d='M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2'\n        />\n      </svg>\n      <p className='mb-1 text-sm  text-primary'>\n        <span className='font-semibold'>Click to upload</span>\n        &nbsp; or drag and drop\n      </p>\n      <p className='text-xs  text-primary'>SVG, PNG, JPG or GIF</p>\n    </>\n  );\n};\n\nconst FileUploadDropzone = () => {\n  const [files, setFiles] = useState<File[] | null>([]);\n\n  const dropzone = {\n    accept: {\n      'image/*': ['.jpg', '.jpeg', '.png', '.gif'],\n    },\n    multiple: true,\n    maxFiles: 4,\n    maxSize: 1 * 1024 * 1024,\n  } satisfies DropzoneOptions;\n\n  return (\n    <FileUploader\n      value={files}\n      orientation='vertical'\n      onValueChange={setFiles}\n      dropzoneOptions={dropzone}\n      className='relative  rounded-lg p-2 w-96 mx-auto'\n    >\n      <FileInput className='outline-dashed bg-background outline-2 outline-primary/40'>\n        <div className='flex items-center justify-center flex-col pt-3 pb-4 w-full '>\n          <FileSvgDraw />\n        </div>\n      </FileInput>\n      <FileUploaderContent className='flex items-center flex-row gap-2'>\n        {files?.map((file, i) => (\n          <FileUploaderItem\n            key={i}\n            index={i}\n            className='size-20 p-0 rounded-md overflow-hidden border'\n            aria-roledescription={`file ${i + 1} containing ${file.name}`}\n          >\n            <Image\n              src={URL.createObjectURL(file)}\n              alt={file.name}\n              height={80}\n              width={80}\n              className='size-20 rounded-md object-cover bg-primary'\n            />\n          </FileUploaderItem>\n        ))}\n      </FileUploaderContent>\n    </FileUploader>\n  );\n};\n\nexport default FileUploadDropzone;\n",
      "path": "registry/components/form/file-upload/img-preview.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/core/file-upload.tsx",
      "content": "'use client';\n\nimport { cn } from '@/lib/utils';\nimport {\n  Dispatch,\n  SetStateAction,\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  useDropzone,\n  DropzoneState,\n  FileRejection,\n  DropzoneOptions,\n} from 'react-dropzone';\nimport { toast } from 'sonner';\nimport { Trash2 as RemoveIcon } from 'lucide-react';\n\ntype DirectionOptions = 'rtl' | 'ltr' | undefined;\n\ntype FileUploaderContextType = {\n  dropzoneState: DropzoneState;\n  isLOF: boolean;\n  isFileTooBig: boolean;\n  removeFileFromSet: (index: number) => void;\n  activeIndex: number;\n  setActiveIndex: Dispatch<SetStateAction<number>>;\n  orientation: 'horizontal' | 'vertical';\n  direction: DirectionOptions;\n};\n\nconst FileUploaderContext = createContext<FileUploaderContextType | null>(null);\n\nexport const useFileUpload = () => {\n  const context = useContext(FileUploaderContext);\n  if (!context) {\n    throw new Error('useFileUpload must be used within a FileUploaderProvider');\n  }\n  return context;\n};\n\ntype FileUploaderProps = {\n  value: File[] | null;\n  reSelect?: boolean;\n  onValueChange: (value: File[] | null) => void;\n  dropzoneOptions: DropzoneOptions;\n  orientation?: 'horizontal' | 'vertical';\n};\n\n/**\n * File upload Docs: {@link: https://localhost:3000/docs/file-upload}\n */\n\nexport const FileUploader = forwardRef<\n  HTMLDivElement,\n  FileUploaderProps & React.HTMLAttributes<HTMLDivElement>\n>(\n  (\n    {\n      className,\n      dropzoneOptions,\n      value,\n      onValueChange,\n      reSelect,\n      orientation = 'vertical',\n      children,\n      dir,\n      ...props\n    },\n    ref\n  ) => {\n    const [isFileTooBig, setIsFileTooBig] = useState(false);\n    const [isLOF, setIsLOF] = useState(false);\n    const [activeIndex, setActiveIndex] = useState(-1);\n    const {\n      accept = {\n        'image/*': ['.jpg', '.jpeg', '.png', '.gif'],\n        'video/*': ['.mp4', '.MOV', '.AVI'],\n      },\n      maxFiles = 1,\n      maxSize = 4 * 1024 * 1024,\n      multiple = true,\n    } = dropzoneOptions;\n\n    const reSelectAll = maxFiles === 1 ? true : reSelect;\n    const direction: DirectionOptions = dir === 'rtl' ? 'rtl' : 'ltr';\n\n    const removeFileFromSet = useCallback(\n      (i: number) => {\n        if (!value) return;\n        const newFiles = value.filter((_, index) => index !== i);\n        onValueChange(newFiles);\n      },\n      [value, onValueChange]\n    );\n\n    const handleKeyDown = useCallback(\n      (e: React.KeyboardEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!value) return;\n\n        const moveNext = () => {\n          const nextIndex = activeIndex + 1;\n          setActiveIndex(nextIndex > value.length - 1 ? 0 : nextIndex);\n        };\n\n        const movePrev = () => {\n          const nextIndex = activeIndex - 1;\n          setActiveIndex(nextIndex < 0 ? value.length - 1 : nextIndex);\n        };\n\n        const prevKey =\n          orientation === 'horizontal'\n            ? direction === 'ltr'\n              ? 'ArrowLeft'\n              : 'ArrowRight'\n            : 'ArrowUp';\n\n        const nextKey =\n          orientation === 'horizontal'\n            ? direction === 'ltr'\n              ? 'ArrowRight'\n              : 'ArrowLeft'\n            : 'ArrowDown';\n\n        if (e.key === nextKey) {\n          moveNext();\n        } else if (e.key === prevKey) {\n          movePrev();\n        } else if (e.key === 'Enter' || e.key === 'Space') {\n          if (activeIndex === -1) {\n            dropzoneState.inputRef.current?.click();\n          }\n        } else if (e.key === 'Delete' || e.key === 'Backspace') {\n          if (activeIndex !== -1) {\n            removeFileFromSet(activeIndex);\n            if (value.length - 1 === 0) {\n              setActiveIndex(-1);\n              return;\n            }\n            movePrev();\n          }\n        } else if (e.key === 'Escape') {\n          setActiveIndex(-1);\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [value, activeIndex, removeFileFromSet]\n    );\n\n    const onDrop = useCallback(\n      (acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n        const files = acceptedFiles;\n\n        if (!files) {\n          toast.error('file error , probably too big');\n          return;\n        }\n\n        const newValues: File[] = value ? [...value] : [];\n\n        if (reSelectAll) {\n          newValues.splice(0, newValues.length);\n        }\n\n        files.forEach((file) => {\n          if (newValues.length < maxFiles) {\n            newValues.push(file);\n          }\n        });\n\n        onValueChange(newValues);\n\n        if (rejectedFiles.length > 0) {\n          for (let i = 0; i < rejectedFiles.length; i++) {\n            if (rejectedFiles[i].errors[0]?.code === 'file-too-large') {\n              toast.error(\n                `File is too large. Max size is ${maxSize / 1024 / 1024}MB`\n              );\n              break;\n            }\n            if (rejectedFiles[i].errors[0]?.message) {\n              toast.error(rejectedFiles[i].errors[0].message);\n              break;\n            }\n          }\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [reSelectAll, value]\n    );\n\n    useEffect(() => {\n      if (!value) return;\n      if (value.length === maxFiles) {\n        setIsLOF(true);\n        return;\n      }\n      setIsLOF(false);\n    }, [value, maxFiles]);\n\n    const opts = dropzoneOptions\n      ? dropzoneOptions\n      : { accept, maxFiles, maxSize, multiple };\n\n    const dropzoneState = useDropzone({\n      ...opts,\n      onDrop,\n      onDropRejected: () => setIsFileTooBig(true),\n      onDropAccepted: () => setIsFileTooBig(false),\n    });\n\n    return (\n      <FileUploaderContext.Provider\n        value={{\n          dropzoneState,\n          isLOF,\n          isFileTooBig,\n          removeFileFromSet,\n          activeIndex,\n          setActiveIndex,\n          orientation,\n          direction,\n        }}\n      >\n        <div\n          ref={ref}\n          tabIndex={0}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\n            'grid w-full focus:outline-none overflow-hidden ',\n            className,\n            {\n              'gap-2': value && value.length > 0,\n            }\n          )}\n          dir={dir}\n          {...props}\n        >\n          {children}\n        </div>\n      </FileUploaderContext.Provider>\n    );\n  }\n);\n\nFileUploader.displayName = 'FileUploader';\n\nexport const FileUploaderContent = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref) => {\n  const { orientation } = useFileUpload();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={cn('w-full px-1')}\n      ref={containerRef}\n      aria-description='content file holder'\n    >\n      <div\n        {...props}\n        ref={ref}\n        className={cn(\n          ' rounded-xl gap-1',\n          orientation === 'horizontal' ? 'grid grid-cols-2' : 'flex flex-col',\n          className\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\n\nFileUploaderContent.displayName = 'FileUploaderContent';\n\nexport const FileUploaderItem = forwardRef<\n  HTMLDivElement,\n  { index: number } & React.HTMLAttributes<HTMLDivElement>\n>(({ className, index, children, ...props }, ref) => {\n  const { removeFileFromSet, activeIndex, direction } = useFileUpload();\n  const isSelected = index === activeIndex;\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'h-7 p-1 border rounded-md justify-between overflow-hidden  w-full cursor-pointer relative hover:bg-primary-foreground',\n        className,\n        isSelected ? 'bg-muted' : ''\n      )}\n      {...props}\n    >\n      <div className='font-medium   leading-none tracking-tight flex items-center gap-1.5 h-full w-full'>\n        {children}\n      </div>\n      <button\n        type='button'\n        className={cn(\n          'absolute bg-primary rounded text-background p-1',\n          direction === 'rtl' ? 'top-1 left-1' : 'top-[0.145em] right-1'\n        )}\n        onClick={() => removeFileFromSet(index)}\n      >\n        <span className='sr-only'>remove item {index}</span>\n        <RemoveIcon className='w-3 h-3 hover:stroke-destructive  duration-200 ease-in-out' />\n      </button>\n    </div>\n  );\n});\n\nFileUploaderItem.displayName = 'FileUploaderItem';\n\ninterface FileInputProps extends React.HTMLAttributes<HTMLDivElement> {\n  parentclass?: string;\n  dropmsg?: string;\n}\nexport const FileInput = forwardRef<HTMLDivElement, FileInputProps>(\n  ({ className, parentclass, dropmsg, children, ...props }, ref) => {\n    const { dropzoneState, isFileTooBig, isLOF } = useFileUpload();\n    const rootProps = isLOF ? {} : dropzoneState.getRootProps();\n\n    return (\n      <div\n        ref={ref}\n        {...props}\n        className={cn(\n          'relative w-full',\n          parentclass,\n          isLOF ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n        )}\n      >\n        <div\n          className={cn(\n            'w-full rounded-lg transition-colors duration-300 ease-in-out',\n            dropzoneState.isDragAccept && 'border-green-500 bg-green-50',\n            dropzoneState.isDragReject && 'border-red-500 bg-red-50',\n            isFileTooBig && 'border-red-500 bg-red-200',\n            !dropzoneState.isDragActive &&\n              'border-gray-300 hover:border-gray-400',\n            className\n          )}\n          {...rootProps}\n        >\n          {children}\n          {dropzoneState.isDragActive && (\n            <div className='absolute inset-0 flex items-center justify-center bg-primary-foreground/60 backdrop-blur-sm rounded-lg'>\n              <p className='text-primary font-medium'>Drop an image here.</p>\n            </div>\n          )}\n        </div>\n        <input\n          ref={dropzoneState.inputRef}\n          disabled={isLOF}\n          {...dropzoneState.getInputProps()}\n          className={cn(isLOF && 'cursor-not-allowed')}\n        />\n      </div>\n    );\n  }\n);\n",
      "path": "components/core/file-upload.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
