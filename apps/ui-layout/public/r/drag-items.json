{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drag-items",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/drag/drag-items.tsx",
      "content": "'use client';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  useMotionValue,\r\n  Reorder,\r\n  useDragControls,\r\n  motion,\r\n  MotionValue,\r\n  animate,\r\n  DragControls,\r\n} from 'motion/react';\r\n\r\nexport default function index() {\r\n  const [items, setItems] = useState([\r\n    {\r\n      id: 1,\r\n      title: 'Follow me on X',\r\n      subtitle: 'Get more update follow me on X',\r\n      date: '32.8.2024',\r\n      src: 'https://images.unsplash.com/photo-1724908549265-06972c22ca37?q=80&w=2070&auto=format&fit=crop',\r\n      link: 'https://x.com/naymur_dev',\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Star the repo',\r\n      subtitle: 'If you like star the repo',\r\n      date: '32.8.2024',\r\n      src: 'https://images.unsplash.com/photo-1724908549265-06972c22ca37?q=80&w=2070&auto=format&fit=crop',\r\n      link: 'https://github.com/ui-layouts/uilayouts',\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Share it with your friend',\r\n      subtitle: 'if you like it, please Share it with your friend ',\r\n      date: '32.8.2024',\r\n      src: 'https://images.unsplash.com/photo-1724908549265-06972c22ca37?q=80&w=2070&auto=format&fit=crop',\r\n      link: 'https://www.ui-layouts.com/',\r\n    },\r\n  ]);\r\n\r\n  return (\r\n    <Reorder.Group\r\n      axis='y'\r\n      values={items}\r\n      onReorder={setItems}\r\n      className='space-y-2 w-full max-w-md mx-auto'\r\n    >\r\n      {items.map((item) => (\r\n        <Item key={item.id} item={item}>\r\n          <h1 className='text-xl'>{item.title}</h1>\r\n          <p className='text-sm'>{item.subtitle}</p>\r\n          <span>{item.date}</span>\r\n          <a\r\n            className='block w-fit p-2 px-3 text-xs rounded-md  bg-primary-foreground text-primary'\r\n            href={item.link}\r\n          >\r\n            Click\r\n          </a>\r\n        </Item>\r\n      ))}\r\n    </Reorder.Group>\r\n  );\r\n}\r\n\r\nconst Item = ({ children, item }: { children: React.ReactNode; item: any }) => {\r\n  const y = useMotionValue(0);\r\n  const boxShadow = useRaisedShadow(y);\r\n  const dragControls = useDragControls();\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [pressed, setPressed] = useState(false);\r\n\r\n  return (\r\n    <Reorder.Item\r\n      value={item}\r\n      style={{ boxShadow, y }}\r\n      dragListener={false}\r\n      dragControls={dragControls}\r\n      onDragStart={() => setIsDragging(true)}\r\n      onDragEnd={() => {\r\n        setIsDragging(false);\r\n        setPressed(false);\r\n      }}\r\n      onPointerUp={() => setPressed(false)}\r\n      onPointerCancel={() => setPressed(false)}\r\n      className='flex justify-between items-center w-full p-3 text-primary-foreground bg-primary border rounded-md'\r\n    >\r\n      <div>{children}</div>\r\n      <ReorderIcon\r\n        dragControls={dragControls}\r\n        isActive={isDragging || pressed}\r\n        onPress={() => setPressed(true)}\r\n      />\r\n    </Reorder.Item>\r\n  );\r\n};\r\n\r\ninterface ReorderIconProps {  \r\n  dragControls: DragControls;\r\n  isActive: boolean;\r\n  onPress: () => void;\r\n}\r\n\r\nexport function ReorderIcon({ dragControls, isActive, onPress }: ReorderIconProps) {\r\n  return (\r\n    <motion.button\r\n      type=\"button\"\r\n      aria-label=\"Reorder\"\r\n      animate={{ scale: isActive ? 0.85 : 1 }}\r\n      transition={{ type: 'spring', stiffness: 500, damping: 30 }}\r\n      onPointerDown={(e) => {\r\n        e.preventDefault();\r\n        onPress();\r\n        dragControls.start(e);\r\n      }}\r\n      className=\"cursor-grab active:cursor-grabbing\"\r\n      style={{ touchAction: 'none' }}\r\n    >\r\n      <svg\r\n        xmlns='http://www.w3.org/2000/svg'\r\n        viewBox='0 0 39 39'\r\n        width='39'\r\n        height='39'\r\n        className='fill-primary-foreground'\r\n      >\r\n        <path d='M 5 0 C 7.761 0 10 2.239 10 5 C 10 7.761 7.761 10 5 10 C 2.239 10 0 7.761 0 5 C 0 2.239 2.239 0 5 0 Z'></path>\r\n        <path d='M 19 0 C 21.761 0 24 2.239 24 5 C 24 7.761 21.761 10 19 10 C 16.239 10 14 7.761 14 5 C 14 2.239 16.239 0 19 0 Z'></path>\r\n        <path d='M 33 0 C 35.761 0 38 2.239 38 5 C 38 7.761 35.761 10 33 10 C 30.239 10 28 7.761 28 5 C 28 2.239 30.239 0 33 0 Z'></path>\r\n        <path d='M 33 14 C 35.761 14 38 16.239 38 19 C 38 21.761 35.761 24 33 24 C 30.239 24 28 21.761 28 19 C 28 16.239 30.239 14 33 14 Z'></path>\r\n        <path d='M 19 14 C 21.761 14 24 16.239 24 19 C 24 21.761 21.761 24 19 24 C 16.239 24 14 21.761 14 19 C 14 16.239 16.239 14 19 14 Z'></path>\r\n        <path d='M 5 14 C 7.761 14 10 16.239 10 19 C 10 21.761 7.761 24 5 24 C 2.239 24 0 21.761 0 19 C 0 16.239 2.239 14 5 14 Z'></path>\r\n        <path d='M 5 28 C 7.761 28 10 30.239 10 33 C 10 35.761 7.761 38 5 38 C 2.239 38 0 35.761 0 33 C 0 30.239 2.239 28 5 28 Z'></path>\r\n        <path d='M 19 28 C 21.761 28 24 30.239 24 33 C 24 35.761 21.761 38 19 38 C 16.239 38 14 35.761 14 33 C 14 30.239 16.239 28 19 28 Z'></path>\r\n        <path d='M 33 28 C 35.761 28 38 30.239 38 33 C 38 35.761 35.761 38 33 38 C 30.239 38 28 35.761 28 33 C 28 30.239 30.239 28 33 28 Z'></path>\r\n      </svg>\r\n    </motion.button>\r\n  );\r\n}\r\n\r\nconst inactiveShadow = '0px 0px 0px rgba(0,0,0,0.8)';\r\n\r\nexport function useRaisedShadow(value: MotionValue<number>) {\r\n  const boxShadow = useMotionValue(inactiveShadow);\r\n\r\n  useEffect(() => {\r\n    let isActive = false;\r\n    value.onChange((latest) => {\r\n      const wasActive = isActive;\r\n      if (latest !== 0) {\r\n        isActive = true;\r\n        if (isActive !== wasActive) {\r\n          animate(boxShadow, '5px 5px 10px rgba(0,0,0,0.3)');\r\n        }\r\n      } else {\r\n        isActive = false;\r\n        if (isActive !== wasActive) {\r\n          animate(boxShadow, inactiveShadow);\r\n        }\r\n      }\r\n    });\r\n  }, [value, boxShadow]);\r\n\r\n  return boxShadow;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}