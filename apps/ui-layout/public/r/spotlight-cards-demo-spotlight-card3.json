{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "spotlight-cards-demo-spotlight-card3",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "next",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/spotlight-cards/demo-spotlight-card3.tsx",
      "content": "// @ts-nocheck\n'use client';\n// https://buildui.com/recipes/spotlight\n\nimport { cn } from '@/lib/utils';\nimport Image from 'next/image';\nimport React, { MouseEvent, useRef, useState } from 'react';\n\nexport default function index() {\n  const boxWrapper = useRef(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const [mousePosition, setMousePosition] = React.useState({\n    x: null,\n    y: null,\n  });\n  React.useEffect(() => {\n    const updateMousePosition = (ev: { clientX: any; clientY: any }) => {\n      setMousePosition({ x: ev.clientX, y: ev.clientY });\n    };\n    window.addEventListener('mousemove', updateMousePosition);\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n    };\n  }, []);\n\n  const [overlayColor, setOverlayColor] = useState({ x: 0, y: 0 });\n  const handleMouemove = ({ currentTarget, clientX, clientY }): MouseEvent => {\n    let { left, top } = currentTarget.getBoundingClientRect();\n\n    const x = clientX - left;\n    const y = clientY - top;\n\n    setOverlayColor({ x, y });\n  };\n  // console.log(overlayColor)\n\n  return (\n    <div className='relative bg-black sm:p-8 p-2 rounded-md'>\n      <div\n        onMouseMove={handleMouemove}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        ref={boxWrapper}\n        className={cn(\n          'group relative rounded-lg  p-[2px] bg-[#eeeeee15] overflow-hidden w-fit mx-auto'\n        )}\n      >\n        {isHovered && (\n          <div\n            className='pointer-events-none absolute opacity-0 z-50 rounded-xl w-full h-full group-hover:opacity-100  transition duration-300 '\n            style={{\n              background: `\n            radial-gradient(\n              250px circle at ${overlayColor.x}px ${overlayColor.y}px,\n              rgba(255, 255, 255, 0.137),\n              transparent 80%\n            )\n          `,\n            }}\n          />\n        )}\n\n        <div\n          className='absolute opacity-0 group-hover:opacity-100 z-10 inset-0 bg-fixed rounded-lg'\n          style={{\n            background: `radial-gradient(circle at ${mousePosition.x}px ${mousePosition.y}px, #ffffff76 0%,transparent 20%,transparent) fixed `,\n          }}\n        ></div>\n\n        <div className=\"relative text-center z-10 sm:px-8 px-4 py-6 rounded-lg w-fit  bg-[url('https://res.cloudinary.com/dzl9yxixg/image/upload/sub-grid_hnhyvi.png')] bg-cover   bg-black h-full mx-auto\">\n          <>\n            <Image\n              src={\n                'https://res.cloudinary.com/dzl9yxixg/image/upload/statistic_ac1ivs.png'\n              }\n              alt='grid'\n              width={600}\n              className='w-fit mx-auto '\n              height={600}\n            />\n            <h1 className='text-3xl pt-6 font-medium tracking-tight text-white'>\n              Subscriber Growth\n            </h1>\n            <p className='pt-2  text-gray-300 capitalize'>\n              Experience a significant boost in your subscriber <br /> count,\n              achieving 3x growth.\n            </p>\n          </>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "registry/components/spotlight-cards/demo-spotlight-card3.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
