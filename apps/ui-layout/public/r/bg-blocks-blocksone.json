{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bg-blocks-blocksone",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/bg-blocks/blocksone.tsx",
      "content": "'use client';\nimport React, { useRef } from 'react';\nimport Blocks from '@/components/core/blocks';\n\nfunction BlockOne() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  return (\n    <div\n      className='h-[550px] overflow-hidden dark:bg-black bg-white before:absolute before:w-full before:h-full before:bg-gradient-to-t  dark:before:from-[#070707] before:from-[#dbdbdb] before:z-[1]  w-full  relative'\n      ref={containerRef}\n    >\n      <Blocks\n        activeDivsClass='dark:bg-[#131212]  bg-[#9ba1a131]  '\n        divClass='dark:border-[#131212] border-[#9ba1a131] '\n        classname='w-full'\n        containerRef={containerRef}\n        activeDivs={{\n          0: new Set([2, 4, 6]),\n          1: new Set([0, 8]),\n          2: new Set([1, 3, 5]),\n          4: new Set([0, 5, 8]),\n          5: new Set([2, 4]),\n          7: new Set([2, 6, 9]),\n          8: new Set([0, 4]),\n          9: new Set([5]),\n          10: new Set([3, 6]),\n          11: new Set([1, 5]),\n          12: new Set([7]),\n          13: new Set([2, 4]),\n          14: new Set([5]),\n          15: new Set([1, 6]),\n        }}\n      />\n    </div>\n  );\n}\n\nexport default BlockOne;\n",
      "path": "registry/components/bg-blocks/blocksone.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/core/blocks.tsx",
      "content": "'use client';\nimport { cn } from '@/lib/utils';\nimport React, { useEffect, useState } from 'react';\n\nfunction Blocks({\n  activeDivs,\n  divClass,\n  classname,\n  activeDivsClass,\n  containerRef,\n}: {\n  activeDivsClass?: string;\n  activeDivs?: any;\n  divClass?: string;\n  classname?: string;\n  containerRef: React.RefObject<HTMLDivElement>;\n}) {\n  const [blocks, setBlocks] = useState<JSX.Element[]>([]);\n\n  useEffect(() => {\n    const updateBlocks = () => {\n      const container = containerRef.current;\n      if (container) {\n        const containerWidth = container.clientWidth;\n        const containerHeight = container.clientHeight;\n        const blockSize = containerWidth * 0.06; // Using 6% of section width for the block size\n\n        const columns = Math.floor(containerWidth / blockSize);\n        const rows = Math.floor(containerHeight / blockSize);\n\n        const newBlocks = Array.from({ length: columns }, (_, columnIndex) => (\n          <div key={columnIndex} className='w-[6vw] h-full'>\n            {Array.from({ length: rows }, (_, rowIndex) => (\n              <div\n                key={rowIndex}\n                className={cn(\n                  `h-[6vh] w-full border-[1px] border-[#5dcece09] ${\n                    // @ts-ignore\n                    activeDivs[columnIndex]?.has(rowIndex)\n                      ? `${activeDivsClass}`\n                      : ''\n                  }`,\n                  divClass\n                )}\n                style={{ height: `${blockSize}px` }}\n              ></div>\n            ))}\n          </div>\n        ));\n\n        setBlocks(newBlocks);\n      }\n    };\n\n    updateBlocks();\n    window.addEventListener('resize', updateBlocks);\n\n    return () => window.removeEventListener('resize', updateBlocks);\n  }, [activeDivs, activeDivsClass, divClass, containerRef]);\n\n  return (\n    <div\n      className={cn(\n        'flex h-full overflow-hidden top-0 -inset-0 left-0 absolute',\n        classname\n      )}\n    >\n      {blocks}\n    </div>\n  );\n}\n\nexport default Blocks;\n",
      "path": "components/core/blocks.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
