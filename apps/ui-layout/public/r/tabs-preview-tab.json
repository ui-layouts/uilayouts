{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs-preview-tab",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "framer-motion",
    "next",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/tabs/preview-tab.tsx",
      "content": "'use client';\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Image from 'next/image';\nimport { TabsBtn, TabsContent, TabsProvider } from '@/components/core/tab';\nconst effectArr = [\n  {\n    id: 1,\n    name: 'basic',\n  },\n  {\n    id: 2,\n    name: 'hover',\n  },\n  {\n    id: 3,\n    name: 'wobbly',\n  },\n];\nfunction index() {\n  const [checkEffect, setCheckEffect] = useState('basic');\n  return (\n    <>\n      <div className='flex bg-black dark:bg-gray-900 w-fit ml-auto mb-4 gap-1 p-1 rounded-md text-white'>\n        {effectArr?.map((effect, index) => {\n          return (\n            <>\n              <motion.button\n                onClick={() => setCheckEffect(effect?.name)}\n                className={`py-1 px-3 rounded-md capitalize relative `}\n              >\n                <span className='z-10 relative'>{effect?.name}</span>\n                {checkEffect === effect.name && (\n                  <motion.div\n                    transition={{\n                      layout: {\n                        duration: 0.2,\n                        ease: 'easeInOut',\n                      },\n                    }}\n                    layoutId={'magnetic'}\n                    className='absolute w-full h-full left-0 top-0 bg-[conic-gradient(from_90deg_at_50%_50%,#8494ff_0%,#3749be_50%,#7d8efc_100%)] rounded-md  z-[1] tab-shadow'\n                  />\n                )}\n              </motion.button>\n            </>\n          );\n        })}\n      </div>\n\n      <div className='border bg-white/10 dark:bg-black/40 backdrop-blur-sm rounded-md p-4  relative'>\n        <TabsProvider\n          defaultValue={'design'}\n          wobbly={checkEffect === 'wobbly' ? true : false}\n          hover={checkEffect === 'hover' ? true : false}\n        >\n          <div className='flex justify-center mt-2'>\n            <div className='flex items-center w-fit dark:bg-[#1d2025] bg-gray-200 p-1 dark:text-white text-black rounded-md border'>\n              <TabsBtn value='design'>\n                <span className='relative z-[2] uppercase sm:text-base text-xs'>\n                  design\n                </span>\n              </TabsBtn>\n              <TabsBtn value='collaborate'>\n                <span className='relative z-[2] uppercase sm:text-base text-xs'>\n                  collaborate\n                </span>\n              </TabsBtn>\n              <TabsBtn value='share'>\n                <span className='relative z-[2] uppercase sm:text-base text-xs'>\n                  share\n                </span>\n              </TabsBtn>\n              <TabsBtn value='publish'>\n                <span className='relative z-[2] uppercase sm:text-base text-xs'>\n                  publish\n                </span>\n              </TabsBtn>\n            </div>\n          </div>\n          <TabsContent value='design'>\n            <div className='w-full'>\n              <Image\n                src={\n                  'https://images.unsplash.com/photo-1506097425191-7ad538b29cef?q=80&w=1000&auto=format&fit=crop'\n                }\n                width={1000}\n                height={1000}\n                alt='preview_img'\n                className='w-[850px] object-cover h-full mx-auto rounded-md'\n              />\n            </div>\n          </TabsContent>\n          <TabsContent value='collaborate'>\n            <div className='w-full'>\n              <Image\n                src={\n                  'https://images.unsplash.com/photo-1557804506-669a67965ba0?q=80&w=1000&auto=format&fit=crop'\n                }\n                width={1000}\n                height={1000}\n                alt='preview_img'\n                className='w-[850px] object-cover h-full mx-auto rounded-md'\n              />\n            </div>\n          </TabsContent>\n          <TabsContent value='share'>\n            <div className='w-full'>\n              <Image\n                src={\n                  'https://images.unsplash.com/photo-1665470909901-162912ec16f7?q=80&w=1000&auto=format&fit=crop'\n                }\n                width={1000}\n                height={1000}\n                alt='preview_img'\n                className='w-[850px] object-cover h-full mx-auto rounded-md'\n              />\n            </div>\n          </TabsContent>\n          <TabsContent value='publish'>\n            <div className='w-full'>\n              <Image\n                src={\n                  'https://images.unsplash.com/photo-1694022861804-840f61d1c452?q=80&w=1000&auto=format&fit=crop'\n                }\n                width={1000}\n                height={1000}\n                alt='preview_img'\n                className='w-[850px] object-cover h-full mx-auto rounded-md'\n              />\n            </div>\n          </TabsContent>\n        </TabsProvider>\n      </div>\n    </>\n  );\n}\n\nexport default index;\n",
      "path": "registry/components/tabs/preview-tab.tsx"
    },
    {
      "type": "registry:component",
      "target": "components/core/tab.tsx",
      "content": "'use client';\n\nimport React, {\n  ReactNode,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  isValidElement,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { cn } from '@/lib/utils';\nimport { AnimatePresence, motion } from 'framer-motion';\n\n// Improved TypeScript interfaces with more specific types\ninterface TabContextType {\n  activeTab: string;\n  setActiveTab: (value: string) => void;\n  wobbly: boolean;\n  hover: boolean;\n  defaultValue: string;\n  prevIndex: number;\n  setPrevIndex: (value: number) => void;\n  tabsOrder: string[];\n}\n\nconst TabContext = createContext<TabContextType | undefined>(undefined);\n\n// Custom hook with memoization\nexport const useTabs = () => {\n  const context = useContext(TabContext);\n  if (!context) {\n    throw new Error('useTabs must be used within a TabsProvider');\n  }\n  return context;\n};\n\n// Props interfaces with more specific types\ninterface TabsProviderProps {\n  children: ReactNode;\n  defaultValue: string;\n  wobbly?: boolean;\n  hover?: boolean;\n}\n\ninterface TabsBtnProps {\n  children: ReactNode;\n  className?: string;\n  value: string;\n}\n\ninterface TabsContentProps {\n  children: ReactNode;\n  className?: string;\n  value: string;\n  yValue?: boolean;\n}\n\nexport const TabsProvider: React.FC<TabsProviderProps> = React.memo(\n  ({ children, defaultValue, wobbly = true, hover = false }) => {\n    // Use useCallback to memoize state setters\n    const [activeTab, setActiveTab] = useState(defaultValue);\n    const [prevIndex, setPrevIndex] = useState(0);\n\n    // Memoize tabs order to prevent unnecessary recalculations\n    const tabsOrder = useMemo(() => {\n      return React.Children.toArray(children)\n        .filter((child) => isValidElement(child) && child.type === TabsContent)\n        .map((child) => (child as React.ReactElement).props.value);\n    }, [children]);\n\n    // Memoize context value to prevent unnecessary re-renders\n    const contextValue = useMemo(\n      () => ({\n        activeTab,\n        setActiveTab,\n        wobbly,\n        hover,\n        defaultValue,\n        setPrevIndex,\n        prevIndex,\n        tabsOrder,\n      }),\n      [\n        activeTab,\n        setActiveTab,\n        wobbly,\n        hover,\n        defaultValue,\n        prevIndex,\n        tabsOrder,\n      ]\n    );\n\n    return (\n      <TabContext.Provider value={contextValue}>{children}</TabContext.Provider>\n    );\n  }\n);\n\n// Memoized TabsBtn component\nexport const TabsBtn: React.FC<TabsBtnProps> = React.memo(\n  ({ children, className, value }) => {\n    const {\n      activeTab,\n      setPrevIndex,\n      setActiveTab,\n      defaultValue,\n      hover,\n      wobbly,\n      tabsOrder,\n    } = useTabs();\n\n    // Use useCallback to memoize the click handler\n    const handleClick = useCallback(() => {\n      setPrevIndex(tabsOrder.indexOf(activeTab));\n      setActiveTab(value);\n    }, [setPrevIndex, tabsOrder, activeTab, setActiveTab, value]);\n\n    return (\n      <motion.div\n        className={cn(\n          `cursor-pointer 2xl:p-2 p-2 2xl:px-4 px-2 rounded-md relative`,\n          className\n        )}\n        onFocus={() => hover && handleClick()}\n        onMouseEnter={() => hover && handleClick()}\n        onClick={handleClick}\n      >\n        {children}\n\n        <AnimatePresence mode='wait'>\n          {activeTab === value && (\n            <>\n              <motion.div\n                transition={{\n                  layout: {\n                    duration: 0.2,\n                    ease: 'easeInOut',\n                    delay: 0.2,\n                  },\n                }}\n                layoutId={defaultValue}\n                className='absolute w-full h-full left-0 top-0 dark:bg-base-dark bg-white rounded-md z-[1]'\n              />\n\n              {wobbly && (\n                <>\n                  <motion.div\n                    transition={{\n                      layout: {\n                        duration: 0.4,\n                        ease: 'easeInOut',\n                        delay: 0.04,\n                      },\n                    }}\n                    layoutId={defaultValue}\n                    className='absolute w-full h-full left-0 top-0 dark:bg-base-dark bg-white rounded-md z-[1] tab-shadow'\n                  />\n                  <motion.div\n                    transition={{\n                      layout: {\n                        duration: 0.4,\n                        ease: 'easeOut',\n                        delay: 0.2,\n                      },\n                    }}\n                    layoutId={`${defaultValue}b`}\n                    className='absolute w-full h-full left-0 top-0 dark:bg-base-dark bg-white rounded-md z-[1] tab-shadow'\n                  />\n                </>\n              )}\n            </>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    );\n  }\n);\n\n// Memoized TabsContent component\nexport const TabsContent: React.FC<TabsContentProps> = React.memo(\n  ({ children, className, value, yValue }) => {\n    const { activeTab, tabsOrder, prevIndex } = useTabs();\n\n    // Memoize direction calculation\n    const isForward = useMemo(\n      () => tabsOrder.indexOf(activeTab) > prevIndex,\n      [tabsOrder, activeTab, prevIndex]\n    );\n\n    return (\n      <AnimatePresence mode='popLayout'>\n        {activeTab === value && (\n          <motion.div\n            initial={{ opacity: 0, y: yValue ? (isForward ? 10 : -10) : 0 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: yValue ? (isForward ? -50 : 50) : 0 }}\n            transition={{\n              duration: 0.3,\n              ease: 'easeInOut',\n              delay: 0.5,\n            }}\n            className={cn('p-2 px-4 rounded-md relative', className)}\n          >\n            {children}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    );\n  }\n);\n\n// Add display names for better debugging\nTabsProvider.displayName = 'TabsProvider';\nTabsBtn.displayName = 'TabsBtn';\nTabsContent.displayName = 'TabsContent';\n",
      "path": "components/core/tab.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
