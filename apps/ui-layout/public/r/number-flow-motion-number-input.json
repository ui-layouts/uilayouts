{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "number-flow-motion-number-input",
  "type": "registry:component",
  "dependencies": [
    "@number-flow/react",
    "clsx",
    "lucide-react",
    "react",
    "tailwind-merge"
  ],
  "files": [
    {
      "type": "registry:component",
      "target": "components/number-flow/motion-number-input.tsx",
      "content": "'use client';\nimport { cn } from '@/lib/utils';\nimport NumberFlow from '@number-flow/react';\nimport { Minus, Plus } from 'lucide-react';\nimport * as React from 'react';\n\ntype Props = {\n  value?: number;\n  min?: number;\n  max?: number;\n  onChange?: (value: number) => void;\n};\n\nexport function Input({\n  value = 0,\n  min = -Infinity,\n  max = Infinity,\n  onChange,\n}: Props) {\n  const defaultValue = React.useRef(value);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [animated, setAnimated] = React.useState(true);\n  // Hide the caret during transitions so you can't see it shifting around:\n  const [showCaret, setShowCaret] = React.useState(true);\n\n  const handleInput: React.ChangeEventHandler<HTMLInputElement> = ({\n    currentTarget: el,\n  }) => {\n    setAnimated(false);\n    if (el.value === '') {\n      onChange?.(defaultValue.current);\n      return;\n    }\n    const num = parseInt(el.value);\n    if (\n      isNaN(num) ||\n      (min != null && num < min) ||\n      (max != null && num > max)\n    ) {\n      // Revert input's value:\n      el.value = String(value);\n    } else {\n      // Manually update value in case they e.g. start with a \"0\" or end with a \".\"\n      // which won't trigger a DOM update (because the number is the same):\n      el.value = String(num);\n      onChange?.(num);\n    }\n  };\n\n  const handlePointerDown =\n    (diff: number) => (event: React.PointerEvent<HTMLButtonElement>) => {\n      setAnimated(true);\n      if (event.pointerType === 'mouse') {\n        event?.preventDefault();\n        inputRef.current?.focus();\n      }\n      const newVal = Math.min(Math.max(value + diff, min), max);\n      onChange?.(newVal);\n    };\n\n  return (\n    <div className='group flex items-stretch rounded-md text-3xl font-semibold border w-fit mx-auto bg-primary-foreground '>\n      <button\n        aria-hidden\n        tabIndex={-1}\n        className='flex items-center pl-[.5em] pr-[.325em]'\n        disabled={min != null && value <= min}\n        onPointerDown={handlePointerDown(-1)}\n      >\n        <Minus className='size-4' absoluteStrokeWidth strokeWidth={3.5} />\n      </button>\n      <div className=\"relative grid items-center justify-items-center text-center [grid-template-areas:'overlap'] *:[grid-area:overlap]\">\n        <input\n          ref={inputRef}\n          className={cn(\n            showCaret ? 'caret-primary' : 'caret-transparent',\n            'spin-hide w-[1.5em] bg-transparent py-2 text-center font-[inherit] text-transparent outline-none appearance-none'\n          )}\n          // Make sure to disable kerning, to match NumberFlow:\n          style={{ fontKerning: 'none' }}\n          type='number'\n          min={min}\n          step={1}\n          autoComplete='off'\n          inputMode='numeric'\n          max={max}\n          value={value}\n          onInput={handleInput}\n        />\n        <NumberFlow\n          value={value}\n          format={{ useGrouping: false }}\n          aria-hidden\n          animated={animated}\n          onAnimationsStart={() => setShowCaret(false)}\n          onAnimationsFinish={() => setShowCaret(true)}\n          className='pointer-events-none'\n          willChange\n        />\n      </div>\n      <button\n        aria-hidden\n        tabIndex={-1}\n        className='flex items-center pl-[.325em] pr-[.5em]'\n        disabled={max != null && value >= max}\n        onPointerDown={handlePointerDown(1)}\n      >\n        <Plus className='size-4' absoluteStrokeWidth strokeWidth={3.5} />\n      </button>\n    </div>\n  );\n}\n\nexport default function index() {\n  const [value, setValue] = React.useState(0);\n  return (\n    <>\n      <Input value={value} min={0} max={99} onChange={setValue} />\n    </>\n  );\n}\n",
      "path": "registry/components/number-flow/motion-number-input.tsx"
    },
    {
      "type": "registry:lib",
      "target": "lib/utils.ts",
      "content": "import { ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function debounce(\n  func: (...args: any[]) => any,\n  wait: number,\n  immediate: boolean = false\n) {\n  let timeout: number | undefined;\n\n  return function executedFunction(this: any, ...args: any[]) {\n    const context: any = this;\n\n    const later = () => {\n      timeout = undefined;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n\n    const callNow: boolean = immediate && !timeout;\n\n    clearTimeout(timeout);\n\n    timeout = window.setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n\nexport function throttle(fn: (...args: any[]) => any, wait: number) {\n  let shouldWait = false;\n\n  return function throttledFunction(this: any, ...args: any[]) {\n    if (!shouldWait) {\n      fn.apply(this, args);\n      shouldWait = true;\n      setTimeout(() => (shouldWait = false), wait);\n    }\n  };\n}\n\nexport const siteConfig = {\n  name: 'ui-layouts',\n  url: 'https://ui-layouts.com',\n  ogImage: 'https://www.ui-layouts.com/og.jpg',\n  description:\n    'Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.',\n  links: {\n    twitter: 'https://twitter.com/naymur_dev',\n    linkedin: 'https://www.linkedin.com/in/naymur-rahman',\n    github: 'https://github.com/naymurdev',\n  },\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
      "path": "lib/utils.ts"
    }
  ]
}
